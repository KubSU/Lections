#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language russian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
C
\backslash
C++
\end_layout

\begin_layout Section
Введение.
 Основные понятие языка
\end_layout

\begin_layout Standard
Язык программирование
\series bold
 с
\backslash
с++
\series default
 получил свое развитие с начала 1980 годов.
 Более рание версии назывались язком 
\series bold
с
\series default
.
 Данный язык 
\series bold
с
\backslash
с++
\series default
 удобен и использовался для написания опреационных систем.
 Из-за этого его называют языком системного программирования.
 Unix и ее програмное обеспечение так-же написанно на 
\series bold
с
\backslash
с++
\series default
.
 
\series bold
с++
\series default
 содержит язык 
\series bold
с
\series default
 как подмножество.
 Между 
\series bold
с 
\series default
и 
\series bold
с++ 
\series default
иметеется сходство на уровне типов данных, операций, операторов, объектов,
 адресов и т.п.
 За некоторыми исключениями, а именно выделения динамической памяти: 
\series bold
new and delete.
 с++ 
\series default
использует теже самые последовательности вызова и возврата из функций что
 и в 
\series bold
с.
 
\series default
Одним из превоночальных предназначений было применение его вместо программирован
ия на 
\series bold
assembler'e --- 
\series default
то есть облегчить жизнь программисту.
 Когда разрабатывали с++ были приняты все меры для сохранения этой возможности
 (поддерживать ассемблер).
 Язык с++ --- это язык с, расширенный введением функций 
\series bold
inline
\series default
, введением классов, прегруженых операций, перегруженных имен функций, константн
ых типов, ссылок, операций управления свободной памятью, проверки параметров
 функции.
 
\end_layout

\begin_layout Subsection
Различия между с и с++
\end_layout

\begin_layout Enumerate
Типы параметров функции могут быть заданы и будут проверяться, могут выполняться
 преобразования типов.
\end_layout

\begin_layout Enumerate
Для выраженийс числами с плавующей точкой может использоваться, плавующаяя
 арифметика одинарной точности
\end_layout

\begin_layout Enumerate
Имена функции могут быть перегруженны
\end_layout

\begin_layout Enumerate
Операции могут быть перегруженны
\end_layout

\begin_layout Enumerate
Могут осуществляться 
\series bold
inline 
\series default
подстановка функции
\end_layout

\begin_layout Enumerate
Объекты данных могут быть константами
\end_layout

\begin_layout Enumerate
Могут быть описаны объекты ссылочного типа
\end_layout

\begin_layout Enumerate
Операция 
\series bold
new and delete
\series default
 обеспечивают свободное хранение данных в памяти
\end_layout

\begin_layout Enumerate
Класс может обеспечивать сокрытие данных, гарантированную иницилизацию,
 определяемые пользователем преоброзования и динамическое задание типов
 через использование виртуальных функций
\end_layout

\begin_layout Enumerate
Имя класса являеться именем типа
\end_layout

\begin_layout Enumerate
Любой указатель, может присваиваться указателю 
\series bold
void* 
\series default
без приведения типов
\end_layout

\begin_layout Section
Алфавит языка
\end_layout

\begin_layout Standard
Не весь алфавит
\end_layout

\begin_layout Standard
= присваивание
\end_layout

\begin_layout Standard
== равно
\end_layout

\begin_layout Standard
!= неравно
\end_layout

\begin_layout Standard
Управляющие последовательности (escape последовательности) то есть специальные
 символьные комбинации, используемые в функциях ввода и вывода информаци.
 Начинаються с 
\series bold

\begin_inset Quotes eld
\end_inset


\backslash

\begin_inset Quotes erd
\end_inset

 
\series default
и потом группа латинских букв: 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Escape последовательности
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Послед-сть
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Описание
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Код
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Звонок.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
007
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Возврат на шаг.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
008
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
t
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Горизонтальная табуляция.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Переход на новую строку.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
v
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Вертикальная табуляция.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
r
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Возврат каретки.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
f
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Перевод формата.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash

\backslash

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Обратная дробная черта.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
ddd
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Символ набора кодов в восьмеричном представлении.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
xddd
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Символ набора кодов в шеснадцатиричном представлении.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Когда компилятор обрабатывает программу он разбивает ее на группы символов
 называемых лексемы.
 Лексема --- это еденица текста программы, которая имеет определенный смысл
 для компилятора, которая не может быть разбита в дальнейшем.
 Существует 6 классов лексем.
\end_layout

\begin_layout Enumerate
Индетификаторы и имена
\end_layout

\begin_deeper
\begin_layout Standard
Регистр имеет значение.
\end_layout

\end_deeper
\begin_layout Enumerate
Ключевые слова
\end_layout

\begin_deeper
\begin_layout Standard
Это индетификаторы имеющиее определенное смысловое значение, которое не
 может быть использовано в качестве переменнной и констант.
\end_layout

\end_deeper
\begin_layout Enumerate
Константы
\end_layout

\begin_deeper
\begin_layout Standard
Константы представляют собой данные используемые только для чтения, не меняют
 своего значения в процессе выполнения прогрммы.
 Константы бывают:
\end_layout

\begin_layout Itemize
Типизированные, с указанием типа 
\series bold
const int a=1;
\end_layout

\begin_layout Itemize
Нетипизированные, без типа 
\series bold
#define a 1; 
\end_layout

\begin_layout Standard
Можно определить с помощью 
\series bold
#define and const.
 
\series default
#
\series bold
define 
\series default
это макрас подстановки.
 В качестве значения может быть использоваться простое число указанного
 типа или же простое вырожение, допустипое для данного типа.
 В зависимости от типа данных константы бывают:
\end_layout

\begin_layout Itemize
Целые
\end_layout

\begin_layout Itemize
Вещественный
\end_layout

\begin_layout Itemize
Символьные 
\end_layout

\begin_layout Itemize
Строковые 
\end_layout

\begin_layout Itemize
Перечислимые
\end_layout

\end_deeper
\begin_layout Enumerate
Строки
\end_layout

\begin_layout Enumerate
Операторы
\end_layout

\begin_layout Enumerate
Прочие разделители
\end_layout

\begin_layout Standard
Границы лексем определяються пробельными символами, а так-же другими лексемами.
 Количество пробелов не имеет значения.
 Возможно 3 способа комментирования кода:
\end_layout

\begin_layout Enumerate
//комены в одну строку
\end_layout

\begin_layout Enumerate
/* комнты не в одну строчку*/
\end_layout

\begin_layout Paragraph
Переменные.
\end_layout

\begin_layout Standard
Они могут изменять свое значение в ходе работы програмы.
 Любая переменная должна иметь имя и должна быть описованна.
\end_layout

\begin_layout Standard

\series bold
int a=1;
\end_layout

\begin_layout Standard

\series bold
double penetretion=3.14;
\end_layout

\begin_layout Standard

\series bold
string str;
\end_layout

\begin_layout Paragraph
Категории типов
\end_layout

\begin_layout Enumerate

\series bold
void
\series default
 --- нет типа
\end_layout

\begin_layout Enumerate

\series bold
function
\end_layout

\begin_layout Enumerate

\series bold
scalar
\series default
 --- арифметический, перечеслимый, указатель и ссылки
\end_layout

\begin_layout Enumerate

\series bold
aggregate
\series default
 --- массив, струкутра, объеденения и классы
\end_layout

\begin_layout Paragraph
Типы данных
\end_layout

\begin_layout Standard
картинка
\end_layout

\begin_layout Paragraph
Операнды и выражения
\end_layout

\begin_layout Standard
Операнды-константы, литеры, выражение или вызов функции или более сложные
 выражения содержашие различные операции и скобки.
 Л
\end_layout

\begin_layout Standard
Каждый операнд, который представляет то или иное выражение может сам быть
 выражением.
 
\end_layout

\begin_layout Enumerate
Бывает унарное выражение, которое состоит из операнда и предшествушего ему
 знаку унарной операции.
 Формат: <знак унарной операции><выражение>
\end_layout

\begin_layout Enumerate
Бинарное выражение, состоящие из двух операндов разделенный знаком бинарной
 операции.
 Формат:<Выражение1><знак><Выражение2>.
\end_layout

\begin_layout Enumerate
Тернарное выражение,которое состоит из трех операндов разделенных знаками
 тернарной операции, либо вопрос ?, либо :.
 Формат:<Выражение1>?<Операнд 2>:<Операнд 3>
\end_layout

\begin_layout Standard
Выражение так-же делятся на 3 типа, как представленно выше.
 Унарные операции выполняються слева на право.
 
\end_layout

\begin_layout Enumerate

\series bold
Унарные операции
\end_layout

\begin_deeper
\begin_layout Itemize
Унарный 
\begin_inset Quotes eld
\end_inset

+
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Отрицание 
\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Inc 
\begin_inset Quotes eld
\end_inset

++
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Dec 
\begin_inset Quotes eld
\end_inset

--
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Поразрядное отрицание или дополнение
\begin_inset Quotes eld
\end_inset

~
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Лоигческое отрицание 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Разодрисация 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Вычесление адреса 
\begin_inset Quotes eld
\end_inset

&
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Подсчет размера 
\begin_inset Quotes eld
\end_inset

sizeof
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Бинарные операции
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

 умножение
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 деление
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

%
\begin_inset Quotes erd
\end_inset

 остаток от деления
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

+
\begin_inset Quotes erd
\end_inset

 сложение
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

-
\begin_inset Quotes erd
\end_inset

 вычитание
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

<<
\begin_inset Quotes erd
\end_inset

 сдвиг влево
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

>>
\begin_inset Quotes erd
\end_inset

 сдвиг вправо
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset

 меньше
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

<=
\begin_inset Quotes erd
\end_inset

 меньше либо равно
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

>=
\begin_inset Quotes erd
\end_inset

 больше либо равно
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

==
\begin_inset Quotes erd
\end_inset

 равно
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

!=
\begin_inset Quotes erd
\end_inset

 неравно
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

&
\begin_inset Quotes erd
\end_inset

 поразрядное и
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

|
\begin_inset Quotes erd
\end_inset

 поразрядное или
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

^
\begin_inset Quotes erd
\end_inset

 поразрядное исключающие или
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

&&
\begin_inset Quotes erd
\end_inset

 логическое и
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

||
\begin_inset Quotes erd
\end_inset

 логическое или
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

,
\begin_inset Quotes erd
\end_inset

 последовательное вычесление
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

=
\begin_inset Quotes erd
\end_inset

 присваивание
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

*=
\begin_inset Quotes erd
\end_inset

 умножение присваивание 
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

/=
\begin_inset Quotes erd
\end_inset

 деление присваивание
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

%=
\begin_inset Quotes erd
\end_inset

 no comment
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

-=
\begin_inset Quotes erd
\end_inset

 no comment
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

+=
\begin_inset Quotes erd
\end_inset

 no comment
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

<<=
\begin_inset Quotes erd
\end_inset

 no comment
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

>>=
\begin_inset Quotes erd
\end_inset

 no comment
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

&=
\begin_inset Quotes erd
\end_inset

 порозрядное и с присваиванием
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

|=
\begin_inset Quotes erd
\end_inset

 поразрядное или с присваиванием
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

^=
\begin_inset Quotes erd
\end_inset

 исключающиеся или
\end_layout

\end_deeper
\begin_layout Standard
При вычеслении выражений тип каждого операнда может быть преобразован к
 другому типу.
 Сами преобразования могут быть не явными - это когда выполение операций
 и вызовы функций.
 Или же явными, когда выполняються операции приведения.
 
\end_layout

\begin_layout Paragraph
Приорететы операции и порядок вычесления.
\end_layout

\begin_layout Standard
С высшего приоретета
\end_layout

\begin_layout Enumerate
() [] 
\series bold
.

\series default
 ->
\end_layout

\begin_layout Enumerate
- + ~ ! * & ++ -- sizeof - унарные
\end_layout

\begin_layout Enumerate
* / %
\end_layout

\begin_layout Enumerate
+ -
\end_layout

\begin_layout Enumerate
<< >>
\end_layout

\begin_layout Enumerate
< > <= >=
\end_layout

\begin_layout Enumerate
== !=
\end_layout

\begin_layout Enumerate
& (Порязрадное и)
\end_layout

\begin_layout Enumerate
^ (Порозрядное исключающие или)
\end_layout

\begin_layout Enumerate
| (Порозрядное или)
\end_layout

\begin_layout Enumerate
&&
\end_layout

\begin_layout Enumerate
||
\end_layout

\begin_layout Enumerate
?: (Условная операция)
\end_layout

\begin_layout Enumerate
= *= /= %= += -= и т.п
\end_layout

\begin_layout Enumerate

\series bold
,
\series default
 (последовательное вычесление)
\end_layout

\begin_layout Paragraph
Арифметические преобразование при вычеслении выражения
\end_layout

\begin_layout Standard
При выполнения операции происходит автоматические преобразование типов,
 чтобы привести операнды выражений к общему типу или чтоб расширить, короткие
 велечины до размера целых велечин, используемых в машинных командах.
 Выполнение преобразование зависит от специфики операции и от типа операнда
 или операндов.
 Рассмотрим общие арфметические преобразования.
 
\end_layout

\begin_layout Enumerate
Операнды типа float преобразуються к типу double
\end_layout

\begin_layout Enumerate
Если один операнд Longdouble то второй преобразуеться к этому же типу.
 
\end_layout

\begin_layout Enumerate
Если один опернад double то второй так-же преобразуються к типу double
\end_layout

\begin_layout Enumerate
Любые операнды типа char and short преобразються к типу int
\end_layout

\begin_layout Enumerate
Любые операнды unsigned char and unsigned short преобразуються к unsigned
 int
\end_layout

\begin_layout Enumerate
Если один операнд типа unsigned long то и второй тоже будет таким
\end_layout

\begin_layout Enumerate
Если один операнд типа Long то и второй тоже к нему преобразуется
\end_layout

\begin_layout Enumerate
Если один операнд unsigned int то и второй тоже будет таким
\end_layout

\begin_layout Standard
Таким образом при вычеслении выражений, операнды преобразуються в типу того
 операнда, который имеет наибольший размер.
 Выполнение операторов присваивание, правило преобразования для следуюшего
 кода будут...
\end_layout

\begin_layout LyX-Code
double ft,sd;
\end_layout

\begin_layout LyX-Code
unsigned char ch;
\end_layout

\begin_layout LyX-Code
unsigned long in;
\end_layout

\begin_layout LyX-Code
int i;
\end_layout

\begin_layout LyX-Code
sd=ft*(i+ch/in);
\end_layout

\begin_layout Standard
Операнд ch преобразуеться к unsigned int потом к unsigned long, далее по
 правилу i преобразуеться к unsigned long и результат операции в скобках
 так-же будет иметь тип unsigned long.
 Затем он преобразуеться к типу double.
 И весь результат будет иметь тип double.
 При преоборазование символьных переменных в целые возникает один момент,
 компилятор неуказывает сам должны ли переменным типам char соотвествовать
 числовые значение со знаком или без.
 Ответ на этот вопрос меняется из поколения к поколению ЭВМ содержится в
 их архитектуре.
 К примеру: крайне левый бит некой переменной char содержаший 1 перобразуеться
 в отрицательное целое, если 0 то положителное.
 На других ЭВМ такое преоразование сопровождаеться добовлением 0 с левого
 края.
 В результате чего всегда получется положительное число.
 В языке с++ любой символ из стандратного набора никогда не даст отрицательного.
 Эти символы можно спокойно использовать как положительные велечины.
 
\end_layout

\begin_layout Paragraph
Мультипликативные и аддитивные операции
\end_layout

\begin_layout Part

\series bold
ТУТ ПИЗДЕЦ !!! ОН НЕСЕТ БРЕД
\end_layout

\begin_layout Standard
В с++ подерживаеться следующий стандартный набор мультипликатиные операций:
 * / % + -.
 Так-же унарный - или +, чтобы менять знак переменной
\end_layout

\begin_layout Standard
*-ассоциативна 
\end_layout

\begin_layout Standard
Аддитивные операции + и -, групируються слева на право, и выполняються обычные
 арифметические преобразования.
 Переполнение не ообрабатываеться, тоесть информация теряется, если результат
 аддитивной операции не может быть представлен типом операндов после преобразова
ния.
 При этом ошибки небудет.
 
\end_layout

\begin_layout Standard
Пример:
\end_layout

\begin_layout LyX-Code
int i=30000;
\end_layout

\begin_layout LyX-Code
int j=300000
\end_layout

\begin_layout LyX-Code
int k;
\end_layout

\begin_layout LyX-Code
k=i+j; 
\end_layout

\begin_layout LyX-Code
k=-чеготам.
\end_layout

\begin_layout Standard
Если адресс * числом, то получеться что целоые число получеться как умножение
 числа на размер того блока куда показывает адресс.
 Когда преобразованная целая велечина складываеться с велечиной указателя,
 то результатом являеться указатель, адресующей ячейку памяти расположенну
 на целую велечину дальше от исходного адреса.
 И новое значение указателя адресует тотже самый тип данных, что и старый
 указатель.
 
\end_layout

\begin_layout Standard
++ и -- - это унарные операции присвивания они увеличивают или уменшают
 значения операнда на еденицу.
 Операнд может быть как целый так и float, а так-же указатель.
 В с++ допускаться два способа записи префексная и постфиксная.
 Если знак операций стоит перед опернадом - префиксная.
 Если знак оперции стоит после опернда - постфиксная.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\end_body
\end_document
