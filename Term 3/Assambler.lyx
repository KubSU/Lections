#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
theorems-starred
\end_modules
\maintain_unincluded_children false
\language russian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\boxbgcolor #55ff00
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Архитектура ЭВМ
\end_layout

\begin_layout Section
Введение
\end_layout

\begin_layout Standard
Под архитектурой ЭВМ будем понимать основные принципы устройства компьютера:
 его структуру, взаимосвязи между отдельными эллементами, а так-же команды.
 Функциональную схему ПК можно представить:
\end_layout

\begin_layout Standard
ОП ЦП МОНИТОР КЛАВА
\end_layout

\begin_layout Standard
\begin_inset Formula $\ \ \ \ \ \ \ \Downarrow$
\end_inset


\end_layout

\begin_layout Standard
Системная шина
\end_layout

\begin_layout Standard
\begin_inset Formula $\ \ \ \ \ \ \ \Downarrow$
\end_inset


\end_layout

\begin_layout Standard
мышь дисковод и т.п
\end_layout

\begin_layout Standard
Система шина(магистраль)-путь по которому передаеться информация от источника
 к любому приемнику.
 Функционально в системной магистрали можно выделить 3 эллемента.
 
\end_layout

\begin_layout Enumerate
Шина адреса, по каторой передаються адреса оперативной памити
\end_layout

\begin_layout Enumerate
Шина данных, по которой передаються данные 
\end_layout

\begin_layout Enumerate
Управляющая шина, по которой передаються команды управления
\end_layout

\begin_layout Section
Оперативная память
\end_layout

\begin_layout Standard
Минимальная структурная единица ОП --- это бит (bi
\emph on
nary digi
\emph default
t).
 Обычно обрабатываеться не один бит, а последовательность, которую называют
 байт.
 Логически байт содержит 8 битов, а физически он содержит 9 битов.
 Девятый бит - это контроль на четность.
 Требования контроля на четность заключаеться в том, что количество еденичных
 битов в байте всегда должно быть не четно.
 Байт это минимально адресуемая еденица памяти, то есть каждый байт имеет
 свой адресс или номер.
 (7| | | | | | |0) - тип байт.
 Компы с архитектурой intel используют принцип адресности.
 Тоесть для доступа к любой информации, которая храниться в некотором байте
 необходимо указать адрес этого байта.
 ОП является энергозависимым устройством для хранения команд и данных.
 В памяти храняться не только данные, но и команды --- это принцип програмного
 управления.
 
\end_layout

\begin_layout Definition
Поле ОП это совокупность байтов с последовательными адресами.
 
\end_layout

\begin_layout Standard
Выделяют поля фиксированной длины: 
\end_layout

\begin_layout Itemize
Word 2 байта, 
\end_layout

\begin_layout Itemize
DoubleWord 4 байта.
 
\end_layout

\begin_layout Standard
Сегмент поля памяти, адрес которого кратен 16.
 Максимальная длина сегмента 64кб.
 Это в частности означает, что адрес любого байта внутри сегмента можно
 задать 16-разрядным двоичным числом относительно начала этого сегмента,
 такие относительные адреса называют смешение.
 Таким образом адрес любого байта можно предаставить в виде адреса сегмента(база
) и смещения внутри сегмента.
 
\end_layout

\begin_layout Section
Схема ЦП
\end_layout

\begin_layout Standard
рисунок
\end_layout

\begin_layout Itemize
ОУ --- опреационное устройство.
 Выполняет основную обработку данных.
\end_layout

\begin_layout Itemize
ШИ --- шинный интерфейс.
 Обеспечивает ОУ данными и командами.
\end_layout

\begin_layout Itemize
АЛУ --- арифметико-логическое устройство.
 Основной эллемент выполняющий преобразования данных.
\end_layout

\begin_layout Itemize
УУ --- устройство управления.
 Управляет работой ЦП и остальных элементов компьютера.
\end_layout

\begin_layout Subsection
Регистры
\end_layout

\begin_layout Standard
В состав ЦП входит локальная память, называемая так-же регистрвой.
 Это восемь 16-разрядных регистров общего назначения (РОН).
 Они предназначены для хранения данных, которые часто использует некоторая
 программа.
 Основным свойством локальной памяти являеться высокая скорость доступа
 к хранящийся к ней информации в сравнении со скоростью доступа к ОП.
 Особенность регистров общего назначения состоит в том, что возможна адресация
 как всего регистра, так и однобайтовой части.
 
\end_layout

\begin_layout Subsection
Регистры общего назначения.
 РОН.
\end_layout

\begin_layout Standard
Основное использование регистров общего назначения, состоит в следующем:
\end_layout

\begin_layout Itemize
АХ --- основной сумматор и применяется для всех операций ввода вывода, некоторых
 операций над строками или некоторых арифметических операций.
 Некоторые команды генерируют более эффективный код если они имеют ссылки
 на регистр АХ.
\end_layout

\begin_layout Itemize
ВХ --- базовый регистр.
 Это единственный регистр общего назначения, который может использоваться
 в качестве 
\begin_inset Quotes eld
\end_inset

индекса
\begin_inset Quotes erd
\end_inset

 для расширенной адресации, используется так-же при вычислениях.
 
\end_layout

\begin_layout Itemize
СХ --- счетчик.
 Управляет количеством повторений циклов и числом битов для сдвигов.
 Так-же используется при вычислениях.
\end_layout

\begin_layout Itemize
DX --- регистр данных.
 Применяется для некоторых операций ввода-вывода и для операций умножения
 и деления над большыми числами, которые используют регистровую пару (DX,AX).
 
\end_layout

\begin_layout Itemize
SP and BP --- обеспечивают системе доступ к данным в сегменте стека.
 Реже они используются для операции сложения и вычитания.
\end_layout

\begin_layout Itemize
SР --- Stack Pointer.
 Указатель стека позволяет временно хранить адреса и иногда данные.
 Связан с регистром SS для адресации стека.
\end_layout

\begin_layout Itemize
ВР --- Base Pointer.
 Указатель базы облегчает доступ к параметрам, данным и адресам передаваемым
 через stack.
\end_layout

\begin_layout Itemize
SI and DI --- индексные регистры, используются для расширенной адресации.
\end_layout

\begin_layout Itemize
SI --- индекс источника.
 Связан с регистром DS.
\end_layout

\begin_layout Itemize
DI --- индекс назначения.
 Связан с регистром ES.
\end_layout

\begin_layout Remark
Любые РОН могут использоваться для сложения и вычитания, как 8 так и 16
 битных чисел.
\end_layout

\begin_layout Subsection
Регистр командного указателя.
 IP.
\end_layout

\begin_layout Standard
IP - содержит смещение на команду, которая должна быть выполнена следующей.
\end_layout

\begin_layout Section
Сегментные регистры
\end_layout

\begin_layout Standard
Каждый сегментный регистр обеспечивает адресацию в 64кб, такая область памати
 называется текущим сегментом, его адрес выровнен на границу параграфа и
 обязательно кратен 16.
 Регистр сегмента кода 
\series bold
CS, 
\series default
содержит начальный адрес сегмента кода.
 Этот адрес + велечина смещения в командном указателе 
\series bold
IP
\series default
 определяет адрес команды, которая будет выполняться следующая.
 Для обычной программы ссылка на 
\series bold
CS
\series default
 не обязатьльна.
 Регистр сегмента данных 
\series bold
DS 
\series default
содержит начальный адрес сегмента данных.
 Доступ к данным происходит относительно начала сегмента.
 Регистр сегмента стека 
\series bold
SS 
\series default
содержит начальный адрес сегмента стека.
 Регистр 
\series bold
ES
\series default
 дополнительный сегментный регистр для управления адресацией памяти, при
 выполнении некоторых операций со строками.
 
\end_layout

\begin_layout Standard
Регистр флагов:
\end_layout

\begin_layout Standard
\begin_inset Formula $\begin{array}{cccccccccccccccc}
 &  &  &  & O & D & I & T & S & Z &  & A &  & P &  & C\\
15 & 14 & 13 & 12 & 11 & 10 & 9 & 8 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0
\end{array}$
\end_inset


\end_layout

\begin_layout Standard
Девять из 16 флагового регистра являеються активными и определяют текущие
 состояние ПК и результат выполнения, многие арифметические команды и команды
 сравнения изменяют состояние флагов.
 Флаги:
\end_layout

\begin_layout Itemize
Флаги условий:
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
Сarry-
\series default
содержит перенос из старшего бита, после арифметических операций, а так-же
 последний бит при сдвигах.
\end_layout

\begin_layout Enumerate

\series bold
Overflow-
\series default
указывает на переполнение старшего бита в арифметических операциях
\end_layout

\begin_layout Enumerate

\series bold
Sign-
\series default
содержит результирующий знак, после арфиметических операций.
 0-
\begin_inset Quotes erd
\end_inset

=
\begin_inset Quotes erd
\end_inset

; 1-
\begin_inset Quotes erd
\end_inset

-
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate

\series bold
Zero-
\series default
Показывает результат арифметических операций и операций сравнения.
 0-
\begin_inset Quotes erd
\end_inset


\begin_inset Formula $\neq$
\end_inset


\begin_inset Quotes erd
\end_inset

.
 1-
\begin_inset Quotes erd
\end_inset

=
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate

\series bold
А-
\series default
Дополнительный перенос.
 Содержит перенос из 3 бита для 8 битных данных.
\end_layout

\begin_layout Enumerate

\series bold
Parity-
\series default
контроль четности, показвыает четность младших 8 битовых данных.
 1-четно, 0-нечетно
\end_layout

\end_deeper
\begin_layout Itemize
Флаги состояния (устанавливаються программно):
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
Derection-
\series default
указывает направление пересылки или сравнение строковых данных.
 0-от младших к старшим битам.
 1-наоборот.
\end_layout

\begin_layout Enumerate

\series bold
Interrapt-
\series default
прерывание.
 1-указывает на возможность внешних прерываний.
 Прерывание - это специальная опаратная функция, выполнение которой зкалючаеться
 в передаче определенного сигнала процессору, после ЦП приостанавливает
 выполнение текущей программы и передает управление, некоторой другой программе
 называемой, обработчиком прерываний.
\end_layout

\begin_layout Enumerate

\series bold
Trap-
\series default
трассировка, обеспечивает возможность работу процессора в пошаговом режиме.
\end_layout

\end_deeper
\begin_layout Section
Внутреннее представление данных
\end_layout

\begin_layout Standard
Система команд ПК поддерживает работу с числами только размера байт и word,
 и частично doubleword.
 Более подрбоная информация в школьном курсе, который я обязуюсь повторить.
 В памяти байт полей, храняться в 
\begin_inset Quotes eld
\end_inset

обратном
\begin_inset Quotes erd
\end_inset

 порядке: -11 FFF5.
 Храниться будет как FF | F5.
 В регистрах храниться в нормальном виде.
 
\end_layout

\begin_layout Subsection
О вещественных числах
\end_layout

\begin_layout Standard
В ПК, нет команд реализующих опреации над вещественными числами.
 Это связано с тем, что аппартаная реализация этих опреаций достаточно дорога.
 Возможно два решения данной проблемы.
 
\end_layout

\begin_layout Enumerate
На основе имеющихся команд, написать собственные процедуры, для реализцаии
 арифметических опреаций с вещественными числами.
\end_layout

\begin_layout Enumerate
Использование арифметического сопроцессора.
\end_layout

\begin_layout Subsection
Представление симфольных данных 
\end_layout

\begin_layout Standard
ASCII
\end_layout

\begin_layout Section
Структура команд
\end_layout

\begin_layout Standard
Машинные команды, занимают от 1 до 6 байт.
 Коды операции занимают 1 или 2 первых байта команды.
 В пк достаточно много различных операций, так что для них не хватает 256
 различных кодов, поэтому некоторые операции объеденяються в группу и им
 даеться один и тот-же код операции, а во втором байте этот код уточнается.
 Кроме этого во втром байте, указываються типы операндов и способы их адресации.
 В остальных байтов команды указываються ее операнды.
 Команды могут иметь, до двух операндов(может быть и 0).
 Размер операндов, байт или слово, реже двойное слово.
 Операнд может быть указан 
\begin_inset Quotes erd
\end_inset

не успел написать
\begin_inset Quotes erd
\end_inset

 (непосредственный операнд), так и в регистре или в поле памяти.
 Результат операции помещаеться в один из операндов.
 Большинство команд с двумя операндами релизует ор1=ор1*ор2, где *-это операция
 заданная кодом операции.
 
\end_layout

\begin_layout Subsection
Форматы команд
\end_layout

\begin_layout Enumerate
RR-регистр регистр.
 Два байта.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $\begin{array}{ccccccc}
\text{КОП} & d & w & 1 & 1 & r1 & r2\\
7 & 1 & 0 & 7 & 6 & 543 & 210
\end{array}$
\end_inset


\end_layout

\begin_layout Standard
w-бит словности, если w=0 операция выполняеться над байтами, если w=1 над
 словами.
 d-направление
\end_layout

\begin_layout Standard
r1=r1*r2 if d=1
\end_layout

\begin_layout Standard
r2=r1*r2 if d=0
\end_layout

\begin_layout Standard
3х битовые поля r1 and r2 учавствуют в операции по следующей схеме.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
w=1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
w=0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
011
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AH
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
101
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DH
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
110
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CH
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BH
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
RS-регистр памяти
\end_layout

\begin_deeper
\begin_layout Standard
2-4 байта.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
КОП
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dw
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mod
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mem
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
adr(0-2,)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
reg:=reg*adr; d=1
\end_layout

\begin_layout Standard
adr:=ref*adr; d=0
\end_layout

\begin_layout Standard
reg-ругистр
\end_layout

\begin_layout Standard
adr-адрес памяти
\end_layout

\begin_layout Standard
d-направление
\end_layout

\begin_layout Standard
2х битовое поле mod определяет количество байтов, которое занимает операнд
 adr
\end_layout

\begin_layout Standard
00-0б
\end_layout

\begin_layout Standard
01-1б
\end_layout

\begin_layout Standard
10-2б
\end_layout

\begin_layout Standard
mem-3бита, указывает способ модификации адреса
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mem
\backslash
mod
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
01
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[Bx]+[SI]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[BX]+[SI]+a8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...+а16
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[BX]+[SI]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[BX]+[DI]+a8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...+а16
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[BP]+[SI]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[BP]+[SI]+a8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...+а16
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
011
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[BP]+[DI]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[BP]+[DI]+a8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...+а16
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[SI]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[SI]+a8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...+а16
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
101
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[DI]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[DI]+a8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...+а16
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
110
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[BP]+a8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...+а16
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
111
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[BX]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[BX]+a8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
...+а16
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
a8-адресс задаеться в байте
\end_layout

\begin_layout Standard
а16-адресс задаеться в слове
\end_layout

\begin_layout Standard
если в комнаде не задан адрес то он являеться нулевым.
 Случай когдa mem=110 and mod=00, говорит об отсутсвиии регистр модификаторов
\end_layout

\begin_layout Standard
mod=11 соответствует формату RR
\end_layout

\end_deeper
\begin_layout Enumerate
RI-регистр непосредсвенный операнд
\end_layout

\begin_deeper
\begin_layout Standard
3-4 байта
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
КОП
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sw
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
КОП'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
I(1-2б)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
reg=reg*I
\end_layout

\begin_layout Standard
КОП-определяет группу операций
\end_layout

\begin_layout Standard
КОП'-саму поерацию
\end_layout

\begin_layout Standard
w-оперделяет длину непоcредсвенного слова
\end_layout

\begin_layout Standard
Для экономии памяти предусмотрен случа, когда в операциях над словами непосредст
венный операнд может быть задан байтом.
 S=1 при W=1.
\end_layout

\begin_layout Standard
При этом при выполнении команд, байт автоматически расшираеться до слова
\end_layout

\end_deeper
\begin_layout Enumerate
SI-память непосредсвенный операнд
\end_layout

\begin_deeper
\begin_layout Standard
3-6 байтов
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
КОП
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sw
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
КОП'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
adr(0-2)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
I(1-2б)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
adr=adr*I
\end_layout

\begin_layout Standard
Cмысл остальных полей остаеться прежним
\end_layout

\end_deeper
\begin_layout Part
Язык Ассамблера
\end_layout

\begin_layout Standard
ЯА практически представляет собой символьную форму записи команд машинного
 языка, тоесь вместо цифровых кодов записывают мнемонические обозначения
 команд, вместо адресов имена, константы можно записывать в 10 системе исчеслени
я
\end_layout

\begin_layout Section
Индентификаторы
\end_layout

\begin_layout Standard
Нужны для обозначения различных частей программы, переменных, меток и т.п.
 В языке ассемблера, индентификатор-это последовательность латинских букв,
 цифр и знаков.
 На последовательность накладываеються следующие ограничения: последовательность
 может быть любой, но значишие только 31 первый символ, как обычно идентификатор
 не должен начинаться с цифры, ах=АХ, запрешена кирилица.
\end_layout

\begin_layout Standard
Идентификаторы деляться на служебные слова и имена.
 Служебные слова имеют заранее определенный смысл и могут обозначать регистры,
 команды, дерективы и т.п.
 Все остальные идентификаторы называються именами и программист волен давать
 красивые имена объектом свеой прогрммы 
\end_layout

\begin_layout Section
Целые числа
\end_layout

\begin_layout Standard
Могут быть записанны в десетичной, двоичной, восьмеричной и шестандацитиричной
 системе исчесления, при записи числа в других системах исчесления кроме
 10, в конце ставиться спецификатор(буква).
\end_layout

\begin_layout Standard
(2) 1011(b)
\end_layout

\begin_layout Standard
(8) 1230(o)(q)
\end_layout

\begin_layout Standard
(16) 123(h)
\end_layout

\begin_layout Standard
(10)123(d)( )
\end_layout

\begin_layout Remark
Если 16ричное число начинаеться с 
\begin_inset Quotes eld
\end_inset

буквенной
\begin_inset Quotes erd
\end_inset

 цифры, то в начале числа должен быть записан хотябы одЫн ноль.
\end_layout

\begin_layout Section
Символьные данные 
\end_layout

\begin_layout Standard
Заключаються либо в одинарные либо в двойные ковычки 'A'=
\begin_inset Quotes erd
\end_inset

A
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Section
Структура программы
\end_layout

\begin_layout Standard
Программа на языке ассемблера, это последовательность инструкций каждый
 из которых записываеться в отдельной строке.
 Инструкции языка ассмблера деляться на три группы:
\end_layout

\begin_layout Enumerate
Коментарии
\end_layout

\begin_layout Enumerate
Директивы
\end_layout

\begin_layout Enumerate
Команды
\end_layout

\begin_layout Subsection
Коментарии
\end_layout

\begin_layout Standard
Как обычно не влияют на смысл программы и предназначены для описания особенносте
й алгоритма.
 Коментарией являеться любая строка, начинающиеся с символа 
\begin_inset Quotes eld
\end_inset

;
\begin_inset Quotes erd
\end_inset

.
 Все символы после ; являються коментариями.
 Допускается многострочный коментарией: COMMENT <маркер><текст>.
 В качества маркера выбираеться первый отличный от пробела символ следующий
 за словом COMMENT.
 Концом такого коментария будет строка с символом маркера, то есть.
 СOMMENT *вы все гавно*.
 Такой вид коментария обычно используеться, когда нужно временно(например
 при отледаке) исключить из программы некоторый код.
\end_layout

\begin_layout Subsection
Директивы
\end_layout

\begin_layout Standard
Кроме машинных команд программе нужно указывать, какие константы и переменные
 использутся, какие имена мы им дали.
\end_layout

\begin_layout Standard
[<ИМЯ>]<Директивы>[<операнды>][;<коментарий>]
\end_layout

\begin_layout Standard
X DB 10,-3,02FAh;массив из 3 эллементов
\end_layout

\begin_layout Standard
Y DB 1
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x+1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x+2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x+3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
02
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Команды
\end_layout

\begin_layout Standard
Это символьная мнемоническая форма записи машинных команд.
 
\end_layout

\begin_layout Standard
[<Метка>:]<Команда>[<операнды>][;<коментарий>]
\end_layout

\begin_layout Standard
L1: ADD AX,2 ; увеличить АХ на 2
\end_layout

\begin_layout Subsection
Директивы определения данных 3 штуки
\end_layout

\begin_layout Standard
Предназначены для описания переменных исползуеммых в программе.
\end_layout

\begin_layout Itemize
DB --- описание байты
\end_layout

\begin_deeper
\begin_layout Standard
define byte --- определить байт
\end_layout

\begin_layout Standard
[<имя>] DB <операнд>{,<операнд>}
\end_layout

\begin_layout Standard
По этой дерективе ассемблер вычесляет операнды и записывает их значения
 в последовательные байты памяти.
 Первому из этих байтов даеться указанное имя, по которому можно ссылаться
 на этот адрес из других мест программы, есть два основных способоа задания
 операнда: ?(неопределенное значение) и констатное выражение со значением
 (-128..255).
\end_layout

\begin_layout Itemize
A DB ?-описывает одЫн байт расположенный по адресу А, в который ничего не
 записывается.
 В этом байте будет, то что осталось от предыдушей программы.
 Адрес ячейки выделенной переменной с именем А принято называть значением
 имени А(не путать с содержимым, которое хранится по этому адресу).
 По описанию переменной ассамблер запоминает, сколько байтов занимает переменная
 в памяти-это размер называеться типом имени переменной.
 Значение(адрес) и тип(размер) имени переменной одназачно определяет ячейку
 обазначаемую этим именем.
 Оператор типа TYPE <имя>.
 Значение этого оператора являеться размер в байтах ячейки выделенной под
 переменную с указанным именем.
 В ассемблере есть стандартная константа с красивым именем BYTE=1.
 И тогда TYPE A имеет размер BYTE.
 
\end_layout

\begin_layout Itemize
Константное выражение.
 Позволяет поисывать перменные с начальными значениями.
 При выполнении программы эти значения могут изменяться.
\end_layout

\begin_deeper
\begin_layout Itemize
A DB 254 ; OFEh
\end_layout

\begin_layout Itemize
B DB -2 ; OFEh(256-2=254)
\end_layout

\begin_layout Itemize
C DB 15h; 21(10)
\end_layout

\begin_layout Standard
Часто в качестве начально значения указываеться символ, задать его можно
 двумя способами: 
\end_layout

\begin_layout Itemize
D1 DB '*'
\end_layout

\begin_layout Itemize
D1 DB 2Ah<-код символа
\end_layout

\end_deeper
\begin_layout Itemize
Деректива с несколькими операндами.
 
\end_layout

\begin_deeper
\begin_layout LyX-Code
M DB 2
\end_layout

\begin_layout LyX-Code
DB -2
\end_layout

\begin_layout LyX-Code
DB ?
\end_layout

\begin_layout LyX-Code
DB '*'
\end_layout

\begin_layout Standard
Сдесь описан массив состоящий из 4 элементов.
 Допускаеться упрощенная запись: M DB 2,-2,?,'*'.
 По этому описанию.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M+1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M+2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M+3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
02
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2A
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Имя М задает адрес первого байта.
 Для ссылок на остальные используется конструкция М+К.
 Записи вида <имя>
\begin_inset Formula $\pm\text{К}$
\end_inset

 это говорит о том что можно прибавить или отнять указанное количество байтов.
\end_layout

\begin_layout LyX-Code
X DB 1,12,3
\end_layout

\begin_layout LyX-Code
M DB 2,-2,?,'*'
\end_layout

\begin_layout LyX-Code
Y DB 4,5,6
\end_layout

\begin_layout LyX-Code
[M-2]=12
\end_layout

\begin_layout LyX-Code
[Y-6]=12
\end_layout

\begin_layout LyX-Code
[Y-7]=1
\end_layout

\end_deeper
\begin_layout Itemize
Операнд строка
\end_layout

\begin_deeper
\begin_layout LyX-Code
S1 DB 'a','b','c'
\end_layout

\begin_layout LyX-Code
S2 DB 'abc'
\end_layout

\begin_layout LyX-Code
S3 DB 'a'
\end_layout

\begin_layout LyX-Code
   DB 'b' 
\end_layout

\begin_layout LyX-Code
   DB 'c'
\end_layout

\begin_layout LyX-Code
S1 S2 S3 равны 
\end_layout

\end_deeper
\begin_layout Itemize
Конструктор повторения DUP
\end_layout

\begin_deeper
\begin_layout Standard
Часто в дерективе приходиться указывать одинаковые операнды
\end_layout

\begin_layout LyX-Code
A DB 0,0,0,0,0,0,0,0,0,0,0,0,0
\end_layout

\begin_layout LyX-Code
A DB 13 DUP(0)
\end_layout

\begin_layout Standard
Это конструкция имеет вид: n DUP (p1,p2,...,pk), где n константа или констатное
 выражение, значение которого может быть вычесленно во время компиляции.
 р1, р2, ...
 рk любые допустимые эллементы дерективы DB в томчисле и конструкция повторения.
 
\end_layout

\begin_layout LyX-Code
B DB 3 DUP(1,2); 1,2,1,2,1,2
\end_layout

\begin_layout LyX-Code
C DB 10 DUP(20 DUP(?))
\end_layout

\begin_layout Standard
Про пример выше.
 В дерективе выделаяеться 200 байтов, значения которых неопределены, это
 место можно трактовать 10 строк по 20 эллементов в каждой строке.
 Фактически должны быть организованна, специальная обработка этих 200 байтов
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
DW --- описание слова
\end_layout

\begin_deeper
\begin_layout Standard
define word --- описываються переменные размером в слово
\end_layout

\begin_layout LyX-Code
A DW ?
\end_layout

\begin_layout LyX-Code
TYPE A=2, ибо WORD
\end_layout

\begin_layout Itemize
Константное выражение 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $-32768..65535\quad[-2^{15};\,2^{16}-1]$
\end_inset


\end_layout

\begin_layout LyX-Code
B DW 1234h
\end_layout

\begin_layout LyX-Code
C DW -2
\end_layout

\begin_layout Standard
Как и в случае дерективы DB неотрицательные числа записываются в память
 как числа без знака, а отрицательные в дополнительном коде.
 При размещении числовых констант, ассе
\end_layout

\begin_layout Standard
мблер автоматически меняет местами значения старшего и младшего байтов.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
В
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
С
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
34
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FF
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Частным случаем может быть описание строки, состоящие из двух или одного
 символа
\end_layout

\begin_layout LyX-Code
S1 DW '01'
\end_layout

\begin_layout LyX-Code
S2 DW '1'
\end_layout

\begin_layout LyX-Code
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
S2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
31
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Адресное выражение
\end_layout

\begin_deeper
\begin_layout Definition
Адресное выражение --- это выражение, значением которого является адрес.
\end_layout

\begin_layout LyX-Code
A DB ?
\end_layout

\begin_layout LyX-Code
B DW A
\end_layout

\begin_layout Standard
В слово выделенное под переменную В записывается адрес переменной А.
 Значение этого адреса определяется, как велечина смещения соответствующего
 поля, относительно начала того сегмента, в котором это поле памяти зарезервиров
анно.
 В качестве адресного выражения может быть использованно специальная переменная
 $ --- счетчик команд.
 
\end_layout

\begin_layout LyX-Code
A DW $
\end_layout

\begin_layout Standard
Запись означает что в поле А адрес поля А
\end_layout

\begin_layout LyX-Code
B DB 100DUP(?)
\end_layout

\begin_layout LyX-Code
C DW $-B;=100-длина В
\end_layout

\end_deeper
\begin_layout Standard
Все что работало с DB работает и с DW
\end_layout

\end_deeper
\begin_layout Itemize
DD --- двойное слово
\end_layout

\begin_deeper
\begin_layout Standard
define double word --- описывает двойное слово
\end_layout

\begin_layout Standard
Имена таких переменных имеют тип DWORD=4байта
\end_layout

\begin_layout Itemize
Целое чесло
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $[-2^{31},\,2^{32}-1]$
\end_inset


\end_layout

\begin_layout LyX-Code
X DD 123456h
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
56
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
34
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
00
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Константное выражение
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $[-2^{15};\,2^{16}-1]$
\end_inset


\end_layout

\begin_layout Standard
В языке ассемблера результаты всех операций беруться по моделю велечены
 
\begin_inset Formula $2^{16}=10000h$
\end_inset

.
 Поэтому получить выражение значение, которого являлось бы 32битовое(даже
 17 битовое) число не удаеться
\end_layout

\begin_layout LyX-Code
X DD 8000h+8002h;=2
\end_layout

\end_deeper
\begin_layout Standard
В DD работает все как в DB и DW
\end_layout

\end_deeper
\begin_layout Subsection
Директивы эквивалетности и присваивания
\end_layout

\begin_layout Standard
Константы описываються с использованием дерективы эквивалетности EQU:
\end_layout

\begin_layout Standard
<имя>EQU<операнд>.
\end_layout

\begin_layout Standard
Здесь обязательно должно быть указаноимя и один операнд.
 Это деректива эквивалента этому коду в паскале Const <имя>=<операнд>.
\end_layout

\begin_layout Standard
С её помощью программист информирует ассемблер о способе интерпретации некоторог
о имени.
 Возможно 3 способа задания операнда:
\end_layout

\begin_layout Enumerate
Операнд константное выражение
\end_layout

\begin_deeper
\begin_layout LyX-Code
A EQU 10
\end_layout

\begin_layout LyX-Code
X DB A DUP(?)
\end_layout

\begin_layout LyX-Code
Y DB A*10+1; 101
\end_layout

\end_deeper
\begin_layout Enumerate
Операнд имя
\end_layout

\begin_deeper
\begin_layout LyX-Code
A EQU N
\end_layout

\begin_layout Standard
В этом случаее именя A and N являються синонимами
\end_layout

\end_deeper
\begin_layout Enumerate
Операнд произвольный текст не являющийся константым выражением или именем.
 
\end_layout

\begin_deeper
\begin_layout Standard
В этом случае, любое вхождение имени, ассемблер заменяет на соответствующий
 текст.
 Отметим, что деректива EQU носит чисто информационый характер.
 По ней ассемблер ничего не записывает в программу, поэтому дерективу EQU
 можно ставить в любое место программы.
\end_layout

\begin_layout Standard
<имя>=<конст.выражение>
\end_layout

\begin_layout LyX-Code
K=1
\end_layout

\begin_layout LyX-Code
N EQU K;N И К СИНОНИМЫ
\end_layout

\begin_layout LyX-Code
A DB N; A:=1
\end_layout

\begin_layout LyX-Code
K=2
\end_layout

\begin_layout LyX-Code
A DB N; A:=2
\end_layout

\begin_layout Standard
Если с помощью дерективы эквивалентности можно определить не только число
 но и другие конструкции, то присваивание можно определить только константу.
\end_layout

\begin_layout Standard
Появление в языке констант, которые менять свои значения вносит некоторую
 неопределенность
\end_layout

\begin_layout LyX-Code
K=1
\end_layout

\begin_layout LyX-Code
N EQU K
\end_layout

\begin_layout LyX-Code
A DW N; A:=1
\end_layout

\begin_layout LyX-Code
K=2
\end_layout

\begin_layout LyX-Code
B DW N; B:=2
\end_layout

\begin_layout LyX-Code
//-------------
\end_layout

\begin_layout LyX-Code
K=1
\end_layout

\begin_layout LyX-Code
N EQU K+10
\end_layout

\begin_layout LyX-Code
C DW N; C=11
\end_layout

\begin_layout LyX-Code
K=2
\end_layout

\begin_layout LyX-Code
D DW N; D=11
\end_layout

\begin_layout Standard
Введем слудюшие уточнения в действие эквивалентност.
 Если в правой части дерективы указанно имя константы, то имя слево не константо
, а как синоним имени справа.
 Если в правой части указанно любое другое констатное выражение, то имя
 слева становиться именем константы.
 По дерективе присваивания, правая часть вычесляеться сразу и становиться
 новым значением константы
\end_layout

\end_deeper
\begin_layout Section
Команды целочисленной арифметике
\end_layout

\begin_layout Enumerate
i8, i16, i32 --- непосредственные операнды, те которые задаються в самой
 команде.
 Длиной соответсвтенно 8, 16, 32 бита.
 
\end_layout

\begin_layout Enumerate
r8, r16 --- регистры общего назначения.
 r8 байтовые регистры: AH, BL, ...
 r16 регистры размером слово: AX, SI, CХ.
\end_layout

\begin_layout Enumerate
sr --- сегментные регистры.
\end_layout

\begin_layout Enumerate
m8, m16, m32 --- адресс памяти соответсующей длины.
\end_layout

\begin_layout Subsection
Команда пересылки.
 MOV
\end_layout

\begin_layout Standard
Имеет синтаксис:
\end_layout

\begin_layout Standard
MOV op1, op2// op1:=op2
\end_layout

\begin_layout Standard
В качестве операндов могут задаваться: регистры, непосредственный операнд
 и адреса.
\end_layout

\begin_layout Standard
Например
\end_layout

\begin_layout LyX-Code
MOV AX,SI
\end_layout

\begin_layout LyX-Code
MOV BL,CH
\end_layout

\begin_layout LyX-Code
MOV AL,BX
\end_layout

\begin_layout LyX-Code
//-----------
\end_layout

\begin_layout LyX-Code
A DW ?
\end_layout

\begin_layout LyX-Code
B DW ?
\end_layout

\begin_deeper
\begin_layout LyX-Code
MOV A,B//ERROR
\end_layout

\begin_layout LyX-Code
MOV A,10
\end_layout

\begin_layout LyX-Code
MOV AX,A
\end_layout

\begin_layout LyX-Code
MOV B,AX
\end_layout

\end_deeper
\begin_layout Standard
В команде MOV нельзя одновременно использовать два сегментных регистра.
 С помощью MOV нельзя изменить регистр CS.
 Кроме явного задания адресов операндов(имена регистров, имена полей памяти),
 можно использовать так называемую косвенную адресацию, то есть адресс некоторог
о поля может формироваться с учетом содержимого некоторых регистров.
 
\end_layout

\begin_layout LyX-Code
MOV AX, A[SI]
\end_layout

\begin_layout Standard
Адресс второго операнда вычесляеться как сумма адреса имени А и содержимого
 регистра SI.
 [ ]-содержимое по соответствующему адресу
\end_layout

\begin_layout LyX-Code
A DW 100DUP(?)
\end_layout

\begin_layout LyX-Code
ADR DW A
\end_layout

\begin_deeper
\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
MOV SI, ADR
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
MOV AX, [SI]
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
SUB SI,SI
\end_layout

\begin_layout LyX-Code
MOV AX,A[SI]
\end_layout

\begin_layout LyX-Code
ADD SI,2
\end_layout

\begin_layout LyX-Code
MOV AX,A[SI]
\end_layout

\begin_layout LyX-Code
...
\end_layout

\end_deeper
\begin_layout Subsection
Оператор указания типа.
 PTR
\end_layout

\begin_layout Standard
Может возникать ситуация, когда ассемблер не может одназначно определить
 размер пересылаемой велечины.
 
\end_layout

\begin_layout LyX-Code
mov [si],0
\end_layout

\begin_layout Standard
По этой команде нельзя одназначно определить, что следует сформировать по
 адресу который храниться в si.
 Нулевой байт или нулевое слово.
 В таких случаях программист, должен явно укзать ассемблеру такую информацию
 с помощью оператора указания типа <тип>PTR<выражение>, где тип --- это
 byte, word, dword, а выражение может быть константым или адресным.
\end_layout

\begin_layout LyX-Code
mov byte ptr[si],0
\end_layout

\begin_layout LyX-Code
mov word ptr[si],0
\end_layout

\begin_layout Standard
Оператор PTR нужно не уточнить а нужно изменить тип непосредственного операнда,
 например:
\end_layout

\begin_layout LyX-Code
z dw 1234h  	
\end_layout

\begin_layout LyX-Code
mov z, byte ptr 0
\end_layout

\begin_layout LyX-Code
//----------------------
\end_layout

\begin_layout Subsection
Команда обмена.
 XCHG
\end_layout

\begin_layout Standard
XCHG op1,op2//swap(op1,op2)
\end_layout

\begin_layout Section
Команды сложения и вычитания
\end_layout

\begin_layout LyX-Code
add op1, op2;op1:=op1+op2;
\end_layout

\begin_layout LyX-Code
sub op1, op2;op1:=op1-op2;
\end_layout

\begin_layout Standard
Программист должен сам учитывать, над каким типом целых чисел выполняеться
 операции.
 При выполнении операции результат может не помещаться в отведенное ему
 место, тогда для контроля коректности полученного результата, следует анализиро
вать биты флагового регистра: OF - знаковый, CF - без знаковый.
 Если рузельтат операции с безнаковыми числами непомещаеться в соответствующий
 байт или слово, то CF устанавливаеться значение 1.
 Это означает, что результат сформирован по модулю 2^16 анлогичная ситуация
 у знаковых чисел будет OF=1.
 
\end_layout

\begin_layout Standard
Термины: установить флаг, означает, что флаг принимает значение 1, сбросить
 флаг, флаг принимает значение 0.
 Кроме флагов OF and CF, команда сложения и вычитания меняет флаги ZF and
 SF.
\end_layout

\begin_layout Subsection
INC and DEC
\end_layout

\begin_layout LyX-Code
inc op1; op1++
\end_layout

\begin_layout LyX-Code
dec op1; op1--
\end_layout

\begin_layout LyX-Code
neg op; op:=-op
\end_layout

\begin_layout Standard
Есть особые случаи op byte and op:=-128 Значение после Neg не измениться
 и т.п случаи.
\end_layout

\begin_layout Standard
op word and word:=-32768 в этом слуаче OF=1 при других операндах 0.
 Если операнд равен 0, то CF=0 в остальных случаях 1, при этом обычном способом
 устанавилваються ZF and SF.
\end_layout

\begin_layout Subsection
ADC and SBB
\end_layout

\begin_layout LyX-Code
adc op1, op2;op1:=op1+op2+СF; сложение с переносом
\end_layout

\begin_layout LyX-Code
sbb op1, op2;op1:=op1-op2-CF; вычитание с учетом заёма
\end_layout

\begin_layout Standard
Эти команды предназначены для моделирования сложения и вычитания длинных
 чисел, которые имеют формат DD.
 
\end_layout

\begin_layout Standard
При выполнении adc:
\end_layout

\begin_layout Standard
хх...х 1х...х
\end_layout

\begin_layout Standard
хх...х 1х...х
\end_layout

\begin_layout Standard
------------
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

х 0х...х
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

СF=1
\end_layout

\begin_layout Standard
Например:
\end_layout

\begin_layout LyX-Code
x dd ?
\end_layout

\begin_layout LyX-Code
y dd ?
\end_layout

\begin_layout LyX-Code
z dd ?; z:=x+y; Напомним что ассемблер записывает в память значения в перевернту
ом виде.
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
mov ax, word ptr x
\end_layout

\begin_layout LyX-Code
add ax, word ptr y
\end_layout

\begin_layout LyX-Code
mov bx, word ptr x+2; CF=0|1
\end_layout

\begin_layout LyX-Code
adc bx, word ptr y+2
\end_layout

\begin_layout LyX-Code
mov word ptr z, ax
\end_layout

\begin_layout LyX-Code
mov word ptr z+2, bx
\end_layout

\begin_layout Standard
Реализцаия сложения для большых чисел.
 Анологично можно реализовать вычитание длинных беззнаковых чисел.
 
\end_layout

\begin_layout Section
Команды умножения и деления
\end_layout

\begin_layout Subsection
Умножение
\end_layout

\begin_layout Standard
В отличии от сложения и вычитания, умножение и деление для знаковых и беззнакомы
х чисел, производиться по разным алгоритмам.
 
\end_layout

\begin_layout LyX-Code
mul op; без знака
\end_layout

\begin_layout LyX-Code
imul op; знак
\end_layout

\begin_layout Standard
Положение первого операнда фиксировано, второй операнд 
\begin_inset Quotes eld
\end_inset

ор
\begin_inset Quotes erd
\end_inset

 задаеться в команде.
 ор-регистр или поле памяти, размер ор определяет размер результата.
 
\end_layout

\begin_layout LyX-Code
op-db
\end_layout

\begin_deeper
\begin_layout LyX-Code
ax:=al*op
\end_layout

\end_deeper
\begin_layout LyX-Code
op-dw
\end_layout

\begin_deeper
\begin_layout LyX-Code
(dx,ax):=ax*op
\end_layout

\end_deeper
\begin_layout Standard
Под результат отводиться в два раза больше места, чем под сомножители.
 Умножение n-значных чисел в общем случае дает произведение из 2n-знаков.
 Если результат не размещаеться в формате операндов, тo CF and OF сбрасываються
 в 0.
 Если результат действительно требует удвоенного объема памяти, то CF and
 OF устанавливаються в 1.
 
\end_layout

\begin_layout Subsection
Деление
\end_layout

\begin_layout LyX-Code
div op; unsigned
\end_layout

\begin_layout LyX-Code
idiv op; signed
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
op-db
\end_layout

\begin_deeper
\begin_layout LyX-Code
ah:=ax mod op
\end_layout

\begin_layout LyX-Code
al:=ax div op
\end_layout

\end_deeper
\begin_layout LyX-Code
op-dw
\end_layout

\begin_deeper
\begin_layout LyX-Code
dx:=(dx,ax) mod op
\end_layout

\begin_layout LyX-Code
ax:=(dx,ax) div op
\end_layout

\end_deeper
\begin_layout Standard
В этих командах указываеться только второй операнд, делитель, который может
 быть регистром или поле памяти, но не может быть непосредсвеннем операндом.
\end_layout

\begin_layout Standard
Обратим внимание на случай op-dw.
 Обычно делимое помещаетьсяв регистр ах при этом dx=0(до div).
 При выполнении деления возможно появления ошибок, деление на 0 или переполнение.
 Переполнение бывает тогда, когда неполное частное не помещаеться в отведенное
 ему место.
\end_layout

\begin_layout LyX-Code
mov ax, 600
\end_layout

\begin_layout LyX-Code
mov bh, 2
\end_layout

\begin_layout LyX-Code
div bh; будет error!!
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_layout LyX-Code
ex 2:
\end_layout

\begin_layout LyX-Code
z:=x div y
\end_layout

\begin_layout LyX-Code
x db ?
\end_layout

\begin_layout LyX-Code
y db ?
\end_layout

\begin_layout LyX-Code
z db ?
\end_layout

\begin_layout LyX-Code
....
\end_layout

\begin_layout LyX-Code
mov al, x
\end_layout

\begin_layout LyX-Code
sub ah, ah
\end_layout

\begin_layout LyX-Code
div y
\end_layout

\begin_layout LyX-Code
mov z, al
\end_layout

\begin_layout Section
Изменения размера числа.
 CBW
\end_layout

\end_body
\end_document
